{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "yuLprfYOIGl_FXfAZTfG9",
      "type": "text",
      "x": 526,
      "y": 188,
      "width": 501.9118347167969,
      "height": 135,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "roundness": null,
      "seed": 549529457,
      "version": 33,
      "versionNonce": 1246471537,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1689862886275,
      "link": null,
      "locked": false,
      "text": "Object Oriented Programming\n\n",
      "fontSize": 36,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 122,
      "containerId": null,
      "originalText": "Object Oriented Programming\n\n",
      "lineHeight": 1.25
    },
    {
      "id": "1RJDc4XB3poZ4y_2aDiTd",
      "type": "text",
      "x": 302,
      "y": 255,
      "width": 1121.3997802734375,
      "height": 2565,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "roundness": null,
      "seed": 692305201,
      "version": 1374,
      "versionNonce": 2133492991,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1689864308572,
      "link": null,
      "locked": false,
      "text": "- Procedural Programming\n    - decisions, loops, variables\n- SAABRE - Flight Reservation and Tracking\n\n\n- Data (state)\n- code that works on that data (behavior)\n\n- OOP says when possible, relate those two\n    things together in a kind of \"capsule\"\n\nIf you have some data, and you want to do something with it,\nthat data should know how to do it.\n\n\"Cohesion\" - making sure that the behaviors of a type\nare related to the data of that type.\n\ne.g. a string in .NET knows how to do a lot of string stuff.\n\nx.Bark();\nx.RollOver();\n\n\nint.Parse(\"123\");\n\nvar someNumber = \"123\";\n\nvar x =someNumber.ToInteger();\n\n\n\n.NET -\n    We create \"Types\"\n    - There are only \"kinds\" of types in .NET\n        - References\n            - Live on the heap\n            - created with Classes (and records)\n        - Values\n            - numbers (int, double, single, float, decimal, etc.)\n            - DateTime\n            - You can create new values by creating a Struct\n            - these live on the stack.\n\n\n\nClasses define the two things an object can have:\n    - data (state)\n        - \"class level variables\" \"fields\"\n            - almost always encapsulated as \"private\"\n    - behavior (methods, properties, constructors)\n        - usually public things that allow the user of an\n          instance of that type to interact with the state.\n\n\n\n\n",
      "fontSize": 36,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 2552,
      "containerId": null,
      "originalText": "- Procedural Programming\n    - decisions, loops, variables\n- SAABRE - Flight Reservation and Tracking\n\n\n- Data (state)\n- code that works on that data (behavior)\n\n- OOP says when possible, relate those two\n    things together in a kind of \"capsule\"\n\nIf you have some data, and you want to do something with it,\nthat data should know how to do it.\n\n\"Cohesion\" - making sure that the behaviors of a type\nare related to the data of that type.\n\ne.g. a string in .NET knows how to do a lot of string stuff.\n\nx.Bark();\nx.RollOver();\n\n\nint.Parse(\"123\");\n\nvar someNumber = \"123\";\n\nvar x =someNumber.ToInteger();\n\n\n\n.NET -\n    We create \"Types\"\n    - There are only \"kinds\" of types in .NET\n        - References\n            - Live on the heap\n            - created with Classes (and records)\n        - Values\n            - numbers (int, double, single, float, decimal, etc.)\n            - DateTime\n            - You can create new values by creating a Struct\n            - these live on the stack.\n\n\n\nClasses define the two things an object can have:\n    - data (state)\n        - \"class level variables\" \"fields\"\n            - almost always encapsulated as \"private\"\n    - behavior (methods, properties, constructors)\n        - usually public things that allow the user of an\n          instance of that type to interact with the state.\n\n\n\n\n",
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}